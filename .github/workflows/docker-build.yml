name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - '**/Dockerfile'      # Only trigger on Dockerfile changes
      - '**/*.dockerfile'    # Alternative Dockerfile extensions
      - '**/docker-compose*.yml'
      - '.github/workflows/docker-build.yml'  # Trigger on workflow changes
  pull_request:
    branches:
      - main
    paths:
      - '**/Dockerfile'
      - '**/*.dockerfile'
      - '**/docker-compose*.yml'
      - '.github/workflows/docker-build.yml'

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Needed for changed files detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/Dockerfile
            **/*.dockerfile
            **/docker-compose*.yml

      - name: Find Dockerfiles and Set Matrix
        id: set-matrix
        run: |
          echo "Finding modified Dockerfiles..."
          declare -A dockerfile_map
          
          # Process changed files
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" ]]; then
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              if [[ $file == *"Dockerfile"* || $file == *".dockerfile" ]]; then
                dir=$(dirname "$file")
                dockerfile_map[$dir]=$file
              fi
            done
          fi
          
          # If no changes or initial run, check all Dockerfiles
          if [ ${#dockerfile_map[@]} -eq 0 ]; then
            while IFS= read -r -d '' file; do
              dir=$(dirname "$file")
              dockerfile_map[$dir]=$file
            done < <(find . -type f -name 'Dockerfile' -print0)
          fi
          
          # Generate matrix JSON
          json="{\"dockerfiles\":["
          first=true
          
          for dir in "${!dockerfile_map[@]}"; do
            df="${dockerfile_map[$dir]}"
            # Sanitize image name
            image_name=$(basename "$dir" | tr -cd '[:alnum:]-_.' | tr '[:upper:]' '[:lower:]')
            # Ensure valid image name
            if [[ ! $image_name =~ ^[a-z0-9] ]]; then
              image_name="app-$image_name"
            fi
            
            if [ "$first" = true ]; then
              first=false
            else
              json+=","
            fi
            
            # Calculate hash of Dockerfile and its dependencies
            content_hash=$(tar -C "$dir" -cf - . | sha256sum | cut -d' ' -f1)
            
            json+="{\"path\":\"$df\",\"context\":\"$dir\",\"image_name\":\"$image_name\",\"hash\":\"$content_hash\"}"
          done
          
          json+="]}"
          echo "matrix=$json" >> $GITHUB_OUTPUT
          echo "Matrix JSON: $json"

  build-and-push:
    needs: set-matrix
    runs-on: ubuntu-latest
    if: ${{ needs.set-matrix.outputs.matrix != '{"dockerfiles":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: lazarevcloud/${{ matrix.image_name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=
            type=raw,value=${{ matrix.hash }}

      - name: Check if image exists
        id: check
        continue-on-error: true
        run: |
          if docker manifest inspect lazarevcloud/${{ matrix.image_name }}:${{ matrix.hash }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        if: steps.check.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.path }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64